#!/bin/bash
#
# description: {{ APPID }} init script
# processname: vol-service
# chkconfig: 234 20 80

APPID=com.easybike.dictionary-service
USER=zwei

#develop
SPRING_PROFILE=localTest

PROJECT_NAME=AppHellobikeDictionaryService
JAR_NAME=dictionary-service.jar
SERVER_PORT=20080

BACKUP_DIR_NAME="backup"
LAST_VERSION_DIR="latest"
CONFIG_DIR_NAME="config"

APP_HOME=$(cd `dirname $0`; pwd)
JAR_LOCATION=$APP_HOME/$JAR_NAME
NOW_DATE=$(date +"%Y-%m-%d")
SPLITER="-------------------------------------------"

#####################################################################################

#Memory configs
#MEM_OPTS="-Xms3200m -Xmx3200m -Xmn2100m -XX:MaxMetaspaceSize=256m -XX:MetaspaceSize=256m"

#GC OPTS
GC_OPTS="$GC_OPTS -XX:+UseConcMarkSweepGC \
-XX:+UseParNewGC \
-XX:+UseCMSCompactAtFullCollection \
-XX:CMSFullGCsBeforeCompaction=0 \
-XX:CMSInitiatingOccupancyFraction=62 \
-XX:CMSTriggerRatio=70"

#GC logging
GC_OPTS="$GC_OPTS -Xloggc:$APP_HOME/logs/gc.log"
GC_OPTS="$GC_OPTS -XX:+PrintGCDateStamps -XX:+PrintGCDetails"
GC_OPTS="$GC_OPTS -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$APP_HOME/logs/heapdump.hprof"

# JMX OPTS
# JMX_OPTS="$JMX_OPTS -Dcom.sun.management.jmxremote.port=9988 \
# -Dcom.sun.management.jmxremote.authenticate=false \
# -Dcom.sun.management.jmxremote.ssl=false \
# -Dcom.sun.management.jmxremote=true"
JVM_OPTS="$JVM_OPTS -Dfile.encoding=UTF-8 -DAPPID=$APPID"

# SPRING PROFILES
SPRING_OPTS=" \
-Dspring.profiles.active=$SPRING_PROFILE \
-Dserver.port=$SERVER_PORT"

START_OPTS="$MEM_OPTS $GC_OPTS $JMX_OPTS $JVM_OPTS $SPRING_OPTS"

#####################################################################################

function main {
  if [[ $EUID -eq 0 ]]; then
   echo "This script must not be run as root"
   exit 0
  fi
  cd $APP_HOME

  for param in $@; do
    case "$param" in
            start)
                start
                ;;
            start:*)
                start $(echo $param | cut -d':' -f 2)
                ;;
            stop)
                stop
                ;;
            status)
                status
                ;;
            list)
            	list
            	;;
            restart)
                stop
                start
                ;;
            backup)
                backup
                ;;
            restore)
                restore
                ;;
            restore:*)
                restore $(echo $param | cut -d':' -f 2)
                ;;
            *)
                echo $"Usage: {start|start:{develop|localTest|uatTest|product}|stop|restart|status|list|backup|restore|restore:{backup directory name}}"
                exit 0
    esac
  done
}

function start {
  echo "Starting..."
  nohup java $START_OPTS -jar $JAR_LOCATION &
  echo "Done."
}

function stop {
  echo "Stopping..."
  echo
  echo "The processes await handling."
  list
  echo
  # while read -p "Do you want to check every instance?(y/n) " -n 1 -r; do
  #   echo
  #   if [[ $REPLY =~ ^[Yy]$ ]]; then
  #     echo
      for pid in $(ps aux | grep java | grep $JAR_NAME | awk '{print $2}'); do
    #     while read -p "Are you sure to kill '$pid'?(y/n) " -n 1 -r; do
    #       echo
    #       if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "kill $pid"
            kill -9 $pid
            echo "Done."
    #         break
    #       elif [[ $REPLY =~ ^[Nn]$ ]]; then
    #         break
    #       else
    #         echo $"Supposed to be {y|Y|n|N}"
    #       fi
    #     done
      done
    #   break;
  #   elif [[ $REPLY =~ ^[Nn]$ ]]; then
  #     for pid in $(ps aux | grep java | grep $JAR_NAME | awk '{print $2}'); do
  #       echo "kill $pid"
  #       kill -9 $pid
  #       echo "Done."
  #     done
  #     break;
  #   else
  #     echo $"Supposed to be {y|Y|n|N}"
  #   fi
  # done

  list
}

function status {
  if(( $(ps aux | grep java | grep $JAR_NAME | grep -v grep | wc -l) > 0)); then
  	echo "$PROJECT_NAME is running"
  else
  	echo "$PROJECT_NAME is stopped"
  fi
}

function list {
  echo $SPLITER
  ps aux | grep java | grep $JAR_NAME
  echo $SPLITER
}

function backup {
  #判断jar包是否存在
  if [ ! -e $JAR_LOCATION ]; then
    echo "$JAR_LOCATION dose not exsist, please check."
    return 1
  fi
  #判断备份目录是否存在，如果不存在则创建
  if [ ! -e $BACKUP_DIR_NAME ]; then
    echo "Create directory $APP_HOME/$BACKUP_DIR_NAME"
    mkdir $BACKUP_DIR_NAME
  fi

  LAST_DIR=$BACKUP_DIR_NAME/$LAST_VERSION_DIR
  #判断最后版本目录是否存在，如果存在则清空
  if [ -e $LAST_DIR ]; then
    echo "Clear directory $APP_HOME/$LAST_DIR"
    rm -r $LAST_DIR
  fi
  echo "Create directory $APP_HOME/$LAST_DIR"
  mkdir $LAST_DIR
  #判断备份目录是否为文件夹
  if [ ! -d $BACKUP_DIR_NAME ]; then
    echo "$APP_HOME/$BACKUP_DIR_NAME is not a directory, please check your config."
    return 1
  fi

  SAVE_DIR=$BACKUP_DIR_NAME/$NOW_DATE
  #判断保存目录是否存在，如果存在则移除
  if [ -e $SAVE_DIR ]; then
    rm -r $SAVE_DIR
  fi
  #创建保存目录
  mkdir $SAVE_DIR
  #拷贝jar包
  echo "Saving jar file '$JAR_LOCATION' to '$APP_HOME/$SAVE_DIR/$JAR_NAME' ..."
  cp $JAR_LOCATION $BACKUP_DIR_NAME/$NOW_DATE
  echo "Done."
  echo "Saving jar file '$JAR_LOCATION' to '$APP_HOME/$LAST_DIR/$JAR_NAME' ..."
  cp $JAR_LOCATION $LAST_DIR
  echo "Done."
  #判断外部配置文件是否存在，如果存在，则拷贝外部配置文件
  if [ -e $CONFIG_DIR_NAME ]; then
    echo "Saving config directory '$CONFIG_DIR_NAME' to '$APP_HOME/$SAVE_DIR/$CONFIG_DIR_NAME' ..."
    cp -r $CONFIG_DIR_NAME $SAVE_DIR
    echo "Done."
    echo "Saving config directory '$CONFIG_DIR_NAME' to '$APP_HOME/$LAST_DIR/$CONFIG_DIR_NAME' ..."
    cp -r $CONFIG_DIR_NAME $LAST_DIR
    echo "Done."
  fi
}

function restore {
  if [ ! $# -eq 0 ]; then
    BACKUP_DIR=$APP_HOME/$BACKUP_DIR_NAME/$1
  else
    BACKUP_DIR=$APP_HOME/$BACKUP_DIR_NAME/$LAST_VERSION_DIR
  fi
  BACKUP_JAR=$BACKUP_DIR/$JAR_NAME
  BACKUP_CONFIG_DIR=$BACKUP_DIR/$CONFIG_DIR_NAME
  CURRENT_CONFIG_DIR=$APP_HOME/$CONFIG_DIR_NAME

  if [ ! -e $BACKUP_DIR ] || [ ! -e $BACKUP_JAR ]; then
    echo "Can not find backup file '$BACKUP_DIR' or '$BACKUP_JAR'."
    return 1
  fi
  #判断jar包是否存在，如果存在则移除
  if [ -e $JAR_LOCATION ]; then
    echo "Remove current jar '$JAR_LOCATION'"
    rm $JAR_LOCATION
    echo "Done."
  fi
  #恢复最后版本jar包
  echo "Copying '$BACKUP_JAR' to '$APP_HOME' ..."
  cp $BACKUP_JAR ./
  echo "Done."
  #判断备份配置文件是否存在
  if [ -e $BACKUP_CONFIG_DIR ]; then
    #判断现配置文件是否存在，如果存在则移除
    if [ -e $CURRENT_CONFIG_DIR ]; then
      echo "Remove current config files '$CURRENT_CONFIG_DIR' ..."
      rm -r $CURRENT_CONFIG_DIR
      echo "Done."
    fi
    #恢复最后版本配置文件
    echo "Copying '$BACKUP_CONFIG_DIR' to '$APP_HOME' ..."
    cp -r $BACKUP_CONFIG_DIR ./
    echo "Done."
  fi
}

main $@
